# URTC Server Setup Guide

## Prerequisites

1. **Go 1.21+** installed
2. **PostgreSQL** database
3. **GitHub Personal Access Token**
4. **Firebase Project** (optional but recommended)

## Step 1: Database Setup

### PostgreSQL Setup
```sql
-- Create database
CREATE DATABASE urtc_db;

-- Create user (optional)
CREATE USER urtc_user WITH PASSWORD 'your_password';
GRANT ALL PRIVILEGES ON DATABASE urtc_db TO urtc_user;
```

## Step 2: GitHub Setup

1. Go to GitHub Settings → Developer settings → Personal access tokens
2. Generate a new token with these scopes:
   - `repo` (for repository creation)
   - `user:email` (for email access)
   - `read:user` (for user information)
3. Copy the token for your `.env` file

## Step 3: Firebase Setup (Optional)

1. Create a new Firebase project at https://console.firebase.google.com
2. Enable Firebase Realtime Database
3. Generate a service account key:
   - Go to Project Settings → Service Accounts
   - Generate new private key
   - Download the JSON file
4. Note your database URL (looks like: `https://your-project-default-rtdb.firebaseio.com/`)

## Step 4: Go Server Setup

1. **Clone/Create your project directory:**
```bash
mkdir urtc-server
cd urtc-server
```

2. **Initialize Go module:**
```bash
go mod init urtc-server
```

3. **Create the files** (use the provided artifacts):
   - `main.go` - Main server file
   - `github.go` - GitHub service functions
   - `firebase.go` - Firebase service functions
   - `go.mod` - Dependencies

4. **Install dependencies:**
```bash
go mod tidy
```

5. **Create environment file:**
```bash
cp .env.example .env
```

6. **Edit `.env` file with your credentials:**
```env
PORT=8080

# Database
DB_HOST=localhost
DB_USER=postgres
DB_PASSWORD=your_password
DB_NAME=urtc_db
DB_PORT=5432

# GitHub
GITHUB_TOKEN=your_github_token_here

# Firebase (optional)
FIREBASE_SERVICE_ACCOUNT_PATH=/path/to/firebase-service-account.json
FIREBASE_DATABASE_URL=https://your-project-default-rtdb.firebaseio.com/
```

7. **Run the server:**
```bash
go run .
```

## Step 5: Unity Setup

1. **Place the Unity script** in `Assets/Editor/URTC_Panel.cs`
2. **Update server URL** in the Unity script if needed (default: `http://localhost:8080`)
3. **Open Unity** and go to `Window → URTC Panel`

## Testing the Setup

1. **Start your Go server:**
```bash
go run .
```

2. **Open Unity URTC Panel**
3. **Enter your email** (must match your GitHub account email)
4. **Click "Start Collaboration"**

## Expected Flow

1. Unity sends request to Go server
2. Server authenticates user with GitHub API
3. Server creates a new GitHub repository
4. Server stores project info in PostgreSQL
5. Server stores user info in Firebase (if configured)
6. Unity displays success message with project ID and repo URL

## API Endpoints

- `POST /api/start-collaboration` - Main endpoint for starting collaboration
- `GET /api/health` - Health check endpoint

## Troubleshooting

### Common Issues:

1. **"GitHub authentication failed"**
   - Check your GitHub token permissions
   - Verify the email exists in a GitHub account

2. **"Database connection failed"**
   - Verify PostgreSQL is running
   - Check database credentials in `.env`

3. **"Firebase error"**
   - Verify service account file path
   - Check Firebase database URL
   - Ensure Firebase is properly initialized

4. **Unity connection issues**
   - Verify server URL in Unity panel
   - Check if server is running on correct port
   - Look at Unity Console for detailed error messages

### Debug Tips:

1. **Check server logs** for detailed error messages
2. **Use `/api/health` endpoint** to verify server is running
3. **Test with curl:**
```bash
curl -X POST http://localhost:8080/api/start-collaboration \
  -H "Content-Type: application/json" \
  -d '{"project_name":"TestProject","user_email":"your@email.com"}'
```

## Next Steps

After this basic setup works, you can:
1. Add collaborator management functionality
2. Implement real-time collaboration features
3. Add project synchronization
4. Enhance security with proper OAuth flow
5. Add project management features in Unity

## Security Notes

- In production, use proper OAuth flow instead of personal access tokens
- Secure your environment variables
- Use HTTPS for all communications
- Implement proper authentication and authorization
- Consider rate limiting for API endpoints